# AUTOGENERATED! DO NOT EDIT! File to edit: ..\03c_other_dashboard_elements.ipynb.

# %% auto 0
__all__ = ['INTRO_TEXT', 'SOURCES_TEXT', 'DATA_DIR', 'DATA_FILE', 'TextBoxes', 'DataAndPlot']

# %% ..\03c_other_dashboard_elements.ipynb 3
import ipywidgets as widgets

# %% ..\03c_other_dashboard_elements.ipynb 6
INTRO_TEXT = '''
<p><b>Curve Smoothing</b>
This tool is for smoothing and selecting land-ocean temperature data for visualization. Start by selecting a date
range, and then select the smoothing algorithm you want to use. Then click through to the next step, where you will change properies
of the curve smoothing algorithm you selected and visualize the data. 
</p>
'''

SOURCES_TEXT = '''
<p>
<b>About Land-Ocean Temperature Data</b>
<a href="https://climate.nasa.gov/vital-signs/global-temperature/"
target="_blank">Global Temperature (NASA)</a>
,
<a href="https://data.giss.nasa.gov/gistemp/"
target="_blank">GISS Surface Temperature Analysis (NASA)</a>
</p><p>
This site is based on data downloaded from the following site on 2020-07-14:
<a href="https://data.giss.nasa.gov/gistemp/graphs/graph_data/Global_Mean_Estimates_based_on_Land_and_Ocean_Data/graph.txt"  # noqa
target="_blank">Global Mean Estimates based on Land and Ocean Data (NASA)</a>
'''


# %% ..\03c_other_dashboard_elements.ipynb 8
class TextBoxes(widgets.VBox):
    def __init__(self):
        # This calls the __init__ method of the parent class, which is 
        # widgets.VBox.
        super().__init__()
        # This layout is for the two HTML widgets
        layout = widgets.Layout(max_width='500px', margin='15px 0 15px 0')
        self.smoothing = widgets.HTML(value=INTRO_TEXT, layout=layout)
        self.sources = widgets.HTML(value=SOURCES_TEXT, layout=layout)

        # Layout for the VBox holding the HTML widgets
        self.layout = widgets.Layout(min_width='500px')
        self.children = [self.smoothing, self.sources]

# %% ..\03c_other_dashboard_elements.ipynb 13
from pathlib import Path

from ipydatagrid import DataGrid
from matplotlib import pyplot as plt
import pandas as pd
from scipy.signal import savgol_filter
import traitlets as tr

# %% ..\03c_other_dashboard_elements.ipynb 15
DATA_DIR = 'data'
DATA_FILE = 'land-ocean-temp-index.csv'

class DataAndPlot(tr.HasTraits):
    smoothing_info = tr.Dict(allow_none=True, default=None).tag(sync=True)
    
    def __init__(self):
        self.original_data = pd.read_csv(Path(DATA_DIR) / DATA_FILE, escapechar='#')
        self.plot_output = widgets.Output()
        self.data_output = DataGrid(self.original_data, header_visibility="column", auto_fit_columns=True)

    @tr.observe('smoothing_info')
    def select_and_plot(self, change):
        self.window_size = change["new"]["window_size"]
        self.polynomial_order = change["new"]["polynomial_order"]
        self.year_range = change["new"]["year_range"]
        self.original_data['Savitzky-Golay'] = savgol_filter(
            self.original_data['Temperature'], 
            self.window_size, 
            self.polynomial_order
        )
        
        self.selected = (
            self.original_data[(self.original_data['Year'] >= self.year_range[0]) & 
                               (self.original_data['Year'] <= self.year_range[1])]
        )
        self.display_plot()
        self.display_data()

    def display_plot(self): 
        # This plotting function is copied from the first 
        # version of the dashboard.
        self.plot_output.clear_output(wait=True) 
        with self.plot_output: 
            plt.xlabel('Year') 
            plt.ylabel('Temperature Anomalies over Land w.r.t. 1951-80 (ËšC)') 
            plt.title('Global Annual Mean Surface Air Temperature Change')
            plt.plot(self.selected['Year'], self.selected['Temperature'], label='Raw Data') 
            plt.plot(self.selected['Year'], self.selected['Savitzky-Golay'], label='Smoothed Data') 
            plt.legend()
            plt.show() 

    def display_data(self):
        self.data_output.data = self.selected
